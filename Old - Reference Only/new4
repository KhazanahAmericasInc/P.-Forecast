{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "6ea51bc1-c7e6-5022-f91e-5933202f9f3a",
    "_uuid": "cde1f7416981edcc7951bbc7a4928933b7ba3760"
   },
   "source": [
    "#INTRODUCTION \n",
    "\n",
    "**Caveat** : Running this notebook will take a while if you do decide to fork so take note. A handful of minutes.\n",
    "\n",
    "This notebook will aim to provide an explanation and application of different feature ranking methods, namely that of Recursive Feature Elimination (RFE), Stability Selection, linear models as well as Random Forest. But first off, it is always imperative to give credit where credit is due. The stuff in this notebook is indebted to and borrows heavily from the excellent 4-part blog article by Ando Saabas on feature selection. So please do check out his article from this link: http://blog.datadive.net/selecting-good-features-part-iv-stability-selection-rfe-and-everything-side-by-side/ \n",
    "\n",
    "The contents of this notebook are as follows: \n",
    "\n",
    " 1. **Data Cleaning and Visualisation** : This section will revolve around exploring the data and visualising some summary statistics. \n",
    " 2. **Stability Selection via Randomised Lasso Method** : Introduce a relatively new feature selection method called \"Stability Selection\" and using the Randomised Lasso in its implementation\n",
    " 3. **Recursive Feature Elimination** : Implementing the Recursive Feature Elimination method of feature ranking via the use of basic Linear Regression \n",
    " 4. **Linear Model Feature Coefficients** : Implementing 3 of Sklearn's linear models (Linear Regression, Lasso and Ridge) and using the inbuilt estimated coefficients for our feature selection\n",
    " 5. **Random Forest Feature Selection** : Using the Random Forest's convenient attribute \"feature_importances\" to calculate and ultimately rank the feature importance.\n",
    "\n",
    "Finally, with all the points 1 to 5 above, we will combine the results to create our:\n",
    "\n",
    "**Feature Ranking Matrix** : Matrix of all the features along with the respective model scores which we can use in our ranking.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "_cell_guid": "15b3d941-c4a4-4c3f-bef1-4c4fcce4a33a",
    "_uuid": "8e0e4f54f2e722ae2cbf175d284d3a3cc0baf024",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "from sklearn.feature_selection import RFE, f_regression\n",
    "from sklearn.linear_model import (LinearRegression, Ridge, Lasso, RandomizedLasso)\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score # to split the data\n",
    "from sklearn.metrics import explained_variance_score, median_absolute_error, r2_score, mean_squared_error, accuracy_score, confusion_matrix, classification_report, fbeta_score #To evaluate our model\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.model_selection import KFold, cross_val_score, train_test_split # Model evaluation\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler # Preprocessing\n",
    "from sklearn.linear_model import Lasso, Ridge, ElasticNet, RANSACRegressor, SGDRegressor, HuberRegressor, BayesianRidge # Linear models\n",
    "from sklearn.ensemble import RandomForestRegressor, BaggingRegressor, AdaBoostRegressor, GradientBoostingRegressor, ExtraTreesRegressor  # Ensemble methods\n",
    "from xgboost import XGBRegressor, plot_importance # XGBoost\n",
    "from sklearn.svm import SVR, SVC, LinearSVC  # Support Vector Regression\n",
    "from sklearn.tree import DecisionTreeRegressor # Decision Tree Regression\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.pipeline import Pipeline # Streaming pipelines\n",
    "from sklearn.decomposition import KernelPCA, PCA # Dimensionality reduction\n",
    "from sklearn.feature_selection import SelectFromModel # Dimensionality reduction\n",
    "from sklearn.model_selection import learning_curve, validation_curve, GridSearchCV # Model evaluation\n",
    "from sklearn.base import clone # Clone estimator\n",
    "from sklearn.metrics import mean_squared_error as MSE\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "2b932325-d368-ee17-75cb-40feb7e8d1bf",
    "_uuid": "5c3eb6eb38eb2cb7a119a52df82845d57d815a98"
   },
   "source": [
    "# 1. DATA CLEANSING AND ANALYSIS\n",
    "\n",
    "Let's first read in the house data as a dataframe \"house\" and inspect the first 5 rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "_cell_guid": "1ca75509-383d-c6f5-d809-8a0e99b4e844",
    "_uuid": "ee8644c1339dc96ddffb9dea31086f76624e26eb",
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>EV/TTM</th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>R&amp;D Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SMAR US Equity</td>\n",
       "      <td>22.467831</td>\n",
       "      <td>1.730068</td>\n",
       "      <td>0.760249</td>\n",
       "      <td>0.805111</td>\n",
       "      <td>0.337879</td>\n",
       "      <td>0.655488</td>\n",
       "      <td>-0.403603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OKTA US EQUITY</td>\n",
       "      <td>17.244657</td>\n",
       "      <td>2.773790</td>\n",
       "      <td>0.308145</td>\n",
       "      <td>0.704052</td>\n",
       "      <td>0.218452</td>\n",
       "      <td>0.533546</td>\n",
       "      <td>-0.359564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MDB US Equity</td>\n",
       "      <td>16.751271</td>\n",
       "      <td>1.945274</td>\n",
       "      <td>0.412487</td>\n",
       "      <td>0.720585</td>\n",
       "      <td>0.323563</td>\n",
       "      <td>0.571938</td>\n",
       "      <td>-0.560198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TEAM US Equity</td>\n",
       "      <td>16.244587</td>\n",
       "      <td>1.072875</td>\n",
       "      <td>0.324274</td>\n",
       "      <td>0.812349</td>\n",
       "      <td>0.438849</td>\n",
       "      <td>0.198422</td>\n",
       "      <td>0.045933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TENB US Equity</td>\n",
       "      <td>15.777605</td>\n",
       "      <td>0.509411</td>\n",
       "      <td>0.567047</td>\n",
       "      <td>0.863696</td>\n",
       "      <td>0.307217</td>\n",
       "      <td>0.619511</td>\n",
       "      <td>-0.192130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Ticker     EV/TTM  TTM Rev Growth  NTM Rev Growth  GP Margin  \\\n",
       "0  SMAR US Equity  22.467831        1.730068        0.760249   0.805111   \n",
       "1  OKTA US EQUITY  17.244657        2.773790        0.308145   0.704052   \n",
       "2   MDB US Equity  16.751271        1.945274        0.412487   0.720585   \n",
       "3  TEAM US Equity  16.244587        1.072875        0.324274   0.812349   \n",
       "4  TENB US Equity  15.777605        0.509411        0.567047   0.863696   \n",
       "\n",
       "   R&D Margin  S&M Margin  EBITDA Margin  \n",
       "0    0.337879    0.655488      -0.403603  \n",
       "1    0.218452    0.533546      -0.359564  \n",
       "2    0.323563    0.571938      -0.560198  \n",
       "3    0.438849    0.198422       0.045933  \n",
       "4    0.307217    0.619511      -0.192130  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house = pd.read_csv(\"newdata2.csv\")\n",
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "_cell_guid": "b6d0eee1-089e-e880-982a-a81d8f36a899",
    "_uuid": "cd35006e81ba37d1832711d82dcfe89b634802f8",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Dropping the id and date columns\n",
    "house = house.drop(house.columns[0],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EV/TTM</th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>R&amp;D Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.543058</td>\n",
       "      <td>0.528432</td>\n",
       "      <td>0.216193</td>\n",
       "      <td>0.707211</td>\n",
       "      <td>0.200162</td>\n",
       "      <td>0.341511</td>\n",
       "      <td>0.028646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.959135</td>\n",
       "      <td>0.488850</td>\n",
       "      <td>0.182720</td>\n",
       "      <td>0.121692</td>\n",
       "      <td>0.096074</td>\n",
       "      <td>0.161951</td>\n",
       "      <td>0.241920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.256451</td>\n",
       "      <td>0.017831</td>\n",
       "      <td>0.008429</td>\n",
       "      <td>0.310098</td>\n",
       "      <td>0.025551</td>\n",
       "      <td>0.032649</td>\n",
       "      <td>-1.114374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.589006</td>\n",
       "      <td>0.194930</td>\n",
       "      <td>0.093431</td>\n",
       "      <td>0.640323</td>\n",
       "      <td>0.135206</td>\n",
       "      <td>0.209131</td>\n",
       "      <td>-0.114647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.752002</td>\n",
       "      <td>0.404623</td>\n",
       "      <td>0.181635</td>\n",
       "      <td>0.714583</td>\n",
       "      <td>0.182750</td>\n",
       "      <td>0.309757</td>\n",
       "      <td>0.042316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.676390</td>\n",
       "      <td>0.656987</td>\n",
       "      <td>0.287955</td>\n",
       "      <td>0.797478</td>\n",
       "      <td>0.246220</td>\n",
       "      <td>0.446033</td>\n",
       "      <td>0.195914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>22.467831</td>\n",
       "      <td>2.773790</td>\n",
       "      <td>1.279817</td>\n",
       "      <td>0.949200</td>\n",
       "      <td>0.627796</td>\n",
       "      <td>0.726084</td>\n",
       "      <td>0.500626</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           EV/TTM  TTM Rev Growth  NTM Rev Growth   GP Margin  R&D Margin  \\\n",
       "count  122.000000      122.000000      122.000000  122.000000  122.000000   \n",
       "mean     7.543058        0.528432        0.216193    0.707211    0.200162   \n",
       "std      3.959135        0.488850        0.182720    0.121692    0.096074   \n",
       "min      1.256451        0.017831        0.008429    0.310098    0.025551   \n",
       "25%      4.589006        0.194930        0.093431    0.640323    0.135206   \n",
       "50%      6.752002        0.404623        0.181635    0.714583    0.182750   \n",
       "75%      9.676390        0.656987        0.287955    0.797478    0.246220   \n",
       "max     22.467831        2.773790        1.279817    0.949200    0.627796   \n",
       "\n",
       "       S&M Margin  EBITDA Margin  \n",
       "count  122.000000     122.000000  \n",
       "mean     0.341511       0.028646  \n",
       "std      0.161951       0.241920  \n",
       "min      0.032649      -1.114374  \n",
       "25%      0.209131      -0.114647  \n",
       "50%      0.309757       0.042316  \n",
       "75%      0.446033       0.195914  \n",
       "max      0.726084       0.500626  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "c0b6dced-bb93-bf29-2a27-4a5b0a05d185",
    "_uuid": "b5085a15f47eeca65b2999a3371230979751c288"
   },
   "source": [
    "**Pairplot Visualisation**\n",
    "\n",
    "Let's create some Seaborn pairplots for the features ('sqft_lot','sqft_above','price','sqft_living','bedrooms') to get a feel for how the various features are distributed vis-a-vis the price as well as the number of bedrooms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {
    "_cell_guid": "2a9dbedc-9be7-f89d-a855-f21738d72e17",
    "_uuid": "74c725f2563ccb6d1bd9fe35a85d36dfb9488d9c",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#sns.pairplot(house[['sqft_lot','sqft_above','price','sqft_living','bedrooms']], hue='bedrooms', palette='afmhot',size=1.4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "222bcbc2-3f3d-9ca0-f30f-757206f923d5",
    "_uuid": "e7f9d812082c1de0ac06a05d5efa2be1b4cdeb3e"
   },
   "source": [
    "From the pairplots, we seem to get the classical linear distribution of the data points, for example with price against sqft_living. This bodes well as in the latter analysis, we will implement some linear models which we will use in our Feature ranking. Let's look at the correlation heatmap: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "_cell_guid": "1d179a59-c663-ef84-c66f-cb8e43226a7c",
    "_uuid": "f2c6729c00b5f2be3cd522e96a4cacfb899a3e02",
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20dd94bdd68>"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "str_list = [] # empty list to contain columns with strings (words)\n",
    "for colname, colvalue in house.iteritems():\n",
    "    if type(colvalue[1]) == str:\n",
    "         str_list.append(colname)\n",
    "# Get to the numeric columns by inversion            \n",
    "num_list = house.columns.difference(str_list) \n",
    "# Create Dataframe containing only numerical features\n",
    "house_num = house[num_list]\n",
    "f, ax = plt.subplots(figsize=(16, 12))\n",
    "plt.title('Pearson Correlation of features')\n",
    "# Draw the heatmap using seaborn\n",
    "#sns.heatmap(house_num.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, cmap=\"PuBuGn\", linecolor='k', annot=True)\n",
    "sns.heatmap(house_num.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, cmap=\"cubehelix\", linecolor='k', annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "fc3d8109-ebc5-264c-f964-04f66da0fec0",
    "_uuid": "a3668fbd5d02ee623aaf7f2cbc430c8301989db3"
   },
   "source": [
    "# 2. Stability Selection via Randomized Lasso\n",
    "\n",
    "In a nutshell, this method serves to apply the feature selection on different parts of the data and features repeatedly until the results can be aggregated. Therefore stronger features ( defined as being selected as important) will have greater scores in this method as compared to weaker features. Refer to this paper by Nicolai Meinshausen and Peter Buhlmann for a much greater detail on the method : http://stat.ethz.ch/~nicolai/stability.pdf\n",
    "\n",
    "In this notebook, the Stability Selection method is conveniently inbuilt into sklearn's randomized lasso model and therefore this will be implemented as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "_cell_guid": "45351992-0216-dd3d-76fe-4a658674f0c4",
    "_uuid": "f7b3717f89e357ee844277dde65f298fd2804276",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:6: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# First extract the target variable which is our House prices\n",
    "Y = house['EV/TTM']\n",
    "Y = Y.values.ravel()\n",
    "# Drop price from the house dataframe and create a matrix out of the house data\n",
    "house = house.drop(['EV/TTM'], axis=1)\n",
    "X = house.as_matrix()\n",
    "# Store the column/feature names into a list \"colnames\"\n",
    "colnames = house.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['TTM Rev Growth', 'NTM Rev Growth', 'GP Margin', 'R&D Margin',\n",
       "       'S&M Margin', 'EBITDA Margin'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "colnames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "1c239bb6-b82e-e35b-7c3c-580c98094cce",
    "_uuid": "1a7926be983626aa6889161a19eee043eef24051"
   },
   "source": [
    "Next, we create a function which will be able to conveniently store our feature rankings obtained from the various methods described here into a Python dictionary. In case you are thinking I created this function, no this is not the case. All credit goes to Ando Saabas and I am only trying to apply what he has discussed in the context of this dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {
    "_cell_guid": "ecc7b17a-b6d5-7d6c-726d-de7b75c3c1eb",
    "_uuid": "c92f382f667f648e7679f4b8b48100dd56273119",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Define dictionary to store our rankings\n",
    "ranks = {}\n",
    "# Create our function which stores the feature rankings to the ranks dictionary\n",
    "def ranking(ranks, names, order=1):\n",
    "    minmax = MinMaxScaler()\n",
    "    ranks = minmax.fit_transform(order*np.array([ranks]).T).T[0]\n",
    "    ranks = map(lambda x: round(x,2), ranks)\n",
    "    return dict(zip(names, ranks))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {
    "_cell_guid": "a56e6fbf-1511-2ff7-0693-2f55aa0d21cd",
    "_uuid": "53bdbc76d42cb608da895a5f57f50d6a714bbb4d",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:58: DeprecationWarning: Class RandomizedLasso is deprecated; The class RandomizedLasso is deprecated in 0.19 and will be removed in 0.21.\n",
      "  warnings.warn(msg, category=DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finished\n"
     ]
    }
   ],
   "source": [
    "# Finally let's run our Selection Stability method with Randomized Lasso\n",
    "rlasso = RandomizedLasso(alpha=0.04)\n",
    "rlasso.fit(X, Y)\n",
    "ranks[\"rlasso/Stability\"] = ranking(np.abs(rlasso.scores_), colnames)\n",
    "print('finished')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "15244118-31f5-e2df-8ce0-34a6d8f5c729",
    "_uuid": "e4620d40f9df515483eb62a507425f74345ca99f"
   },
   "source": [
    "# 3. Recursive Feature Elimination ( RFE )\n",
    "\n",
    "Now onto the next method in our feature ranking endeavour. Recursive Feature Elimination or RFE uses a model ( eg. linear Regression or SVM) to select either the best or worst-performing feature, and then excludes this feature. The whole process is then iterated until all features in the dataset are used up ( or up to a user-defined limit). Sklearn conveniently possesses a RFE function via the sklearn.feature_selection call and we will use this along with a simple linear regression model for our ranking search as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "_cell_guid": "e11f8021-2f8b-074b-d0cc-c6d9d6d8ae8e",
    "_uuid": "f4c3fbbc4edeca6db3b183ed14790cb87f638c73",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting estimator with 6 features.\n",
      "Fitting estimator with 5 features.\n",
      "Fitting estimator with 4 features.\n",
      "Fitting estimator with 3 features.\n",
      "Fitting estimator with 2 features.\n"
     ]
    }
   ],
   "source": [
    "# Construct our Linear Regression model\n",
    "lr = LinearRegression(normalize=True)\n",
    "lr.fit(X,Y)\n",
    "#stop the search when only the last feature is left\n",
    "rfe = RFE(lr, n_features_to_select=1, verbose =3 )\n",
    "rfe.fit(X,Y)\n",
    "ranks[\"RFE\"] = ranking(list(map(float, rfe.ranking_)), colnames, order=-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "c6457163-f8c0-85a7-d69f-5ca2a880010f",
    "_uuid": "757117f801fb02d422a4e768e40a380e838e57df"
   },
   "source": [
    "# 4. Linear Model Feature Ranking\n",
    "\n",
    "Now let's apply 3 different linear models (Linear, Lasso and Ridge Regression) and how the features are selected and prioritised via these models. To achieve this, I shall use the sklearn implementation of these models and in particular the attribute .coef to return the estimated coefficients for each feature in the linear model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {
    "_cell_guid": "64b0534b-c62a-7d85-e181-615b7a3743c9",
    "_uuid": "7eae3169285b35f76de75292ae4f6091c31960a9",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Using Linear Regression\n",
    "lr = LinearRegression(normalize=True)\n",
    "lr.fit(X,Y)\n",
    "ranks[\"LinReg\"] = ranking(np.abs(lr.coef_), colnames)\n",
    "\n",
    "# Using Ridge \n",
    "ridge = Ridge(alpha = 7)\n",
    "ridge.fit(X,Y)\n",
    "ranks['Ridge'] = ranking(np.abs(ridge.coef_), colnames)\n",
    "\n",
    "# Using Lasso\n",
    "lasso = Lasso(alpha=.05)\n",
    "lasso.fit(X, Y)\n",
    "ranks[\"Lasso\"] = ranking(np.abs(lasso.coef_), colnames)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "ee729bd0-270e-dc30-8fc8-b2d79873c4e1",
    "_uuid": "edb4e6e2625bb63f06d53dd9db73402a83575b9a"
   },
   "source": [
    "# 5. Random Forest feature ranking\n",
    "\n",
    "Sklearn's Random Forest model also comes with it's own inbuilt feature ranking attribute and one can conveniently just call it via \"feature_importances_\". That is what we will be using as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "_cell_guid": "f013dad9-8855-530f-f792-48163dab2457",
    "_uuid": "f8ab99420883f6e3391bdb97048454c03e9c4f8a",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "building tree 1 of 50building tree 2 of 50\n",
      "building tree 3 of 50\n",
      "\n",
      "building tree 4 of 50\n",
      "building tree 5 of 50\n",
      "building tree 6 of 50building tree 7 of 50\n",
      "\n",
      "building tree 8 of 50\n",
      "building tree 9 of 50building tree 10 of 50\n",
      "\n",
      "building tree 11 of 50\n",
      "building tree 12 of 50\n",
      "building tree 13 of 50\n",
      "building tree 14 of 50\n",
      "building tree 15 of 50\n",
      "building tree 16 of 50\n",
      "building tree 17 of 50\n",
      "building tree 18 of 50\n",
      "building tree 19 of 50building tree 20 of 50\n",
      "\n",
      "building tree 21 of 50\n",
      "building tree 22 of 50\n",
      "building tree 23 of 50\n",
      "building tree 24 of 50\n",
      "building tree 25 of 50\n",
      "building tree 26 of 50\n",
      "building tree 27 of 50\n",
      "building tree 28 of 50\n",
      "building tree 29 of 50\n",
      "building tree 30 of 50building tree 31 of 50\n",
      "\n",
      "building tree 32 of 50\n",
      "building tree 33 of 50\n",
      "building tree 34 of 50\n",
      "building tree 35 of 50\n",
      "building tree 36 of 50building tree 37 of 50\n",
      "building tree 38 of 50\n",
      "\n",
      "building tree 39 of 50\n",
      "building tree 40 of 50\n",
      "building tree 41 of 50\n",
      "building tree 42 of 50\n",
      "building tree 43 of 50\n",
      "building tree 44 of 50\n",
      "building tree 45 of 50\n",
      "building tree 46 of 50\n",
      "building tree 47 of 50\n",
      "building tree 48 of 50\n",
      "building tree 49 of 50\n",
      "building tree 50 of 50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  24 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestRegressor(n_jobs=-1, n_estimators=50, verbose=3)\n",
    "rf.fit(X,Y)\n",
    "ranks[\"RF\"] = ranking(rf.feature_importances_, colnames);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "20ed4bd0-29b6-86a8-0bb8-cd34424376d5",
    "_uuid": "37dd6667f94db4526867b21b3375df16954610ef"
   },
   "source": [
    "# 6. Creating the Feature Ranking Matrix\n",
    "\n",
    "We combine the scores from the various methods above and output it in a matrix form for convenient viewing as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {
    "_cell_guid": "b6eb5b25-cc7e-f1eb-6a7b-8f591b7e560e",
    "_uuid": "e09a8414122d190ae530b4dcc8b59bf7c6a4d82a",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tLasso\tLinReg\tRF\tRFE\tRidge\trlasso/Stability\tMean\n",
      "TTM Rev Growth\t0.44\t0.0\t0.34\t0.0\t1.0\t1.0\t0.46\n",
      "NTM Rev Growth\t1.0\t0.47\t1.0\t1.0\t0.98\t0.99\t0.91\n",
      "GP Margin\t0.24\t1.0\t0.15\t0.8\t0.27\t0.38\t0.47\n",
      "R&D Margin\t0.0\t0.35\t0.0\t0.2\t0.0\t0.06\t0.1\n",
      "S&M Margin\t0.0\t0.82\t0.02\t0.6\t0.0\t0.0\t0.24\n",
      "EBITDA Margin\t0.09\t0.6\t0.09\t0.4\t0.26\t0.28\t0.29\n"
     ]
    }
   ],
   "source": [
    "# Create empty dictionary to store the mean value calculated from all the scores\n",
    "r = {}\n",
    "for name in colnames:\n",
    "    r[name] = round(np.mean([ranks[method][name] \n",
    "                             for method in ranks.keys()]), 2)\n",
    " \n",
    "methods = sorted(ranks.keys())\n",
    "ranks[\"Mean\"] = r\n",
    "methods.append(\"Mean\")\n",
    " \n",
    "print(\"\\t%s\" % \"\\t\".join(methods))\n",
    "for name in colnames:\n",
    "    print(\"%s\\t%s\" % (name, \"\\t\".join(map(str, \n",
    "                         [ranks[method][name] for method in methods]))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "5d9d44d0-fd8d-894e-657f-81762195499c",
    "_uuid": "4b68741c8ffc59327db34488273b990a5fa6c6aa"
   },
   "source": [
    "Now, with the matrix above, the numbers and layout does not seem very easy or pleasant to the eye. Therefore, let's just collate the mean ranking score attributed to each of the feature and plot that via Seaborn's factorplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {
    "_cell_guid": "daae301e-e669-b2b6-6978-cbcad579696c",
    "_uuid": "d798434946ba4507b1138a5ece8647c757b763b9",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Put the mean scores into a Pandas dataframe\n",
    "meanplot = pd.DataFrame(list(r.items()), columns= ['Feature','Mean Ranking'])\n",
    "\n",
    "# Sort the dataframe\n",
    "meanplot = meanplot.sort_values('Mean Ranking', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {
    "_cell_guid": "2bdfa64e-d23d-d042-5e9d-080beb245ece",
    "_uuid": "3f78ab9b8271d36d4405ef83b3fac1609f2c6e2a",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
      "  warnings.warn(msg)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:3672: UserWarning: The `size` paramter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x20dd8f19b00>"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1915.2x1008 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the ranking of the features\n",
    "sns.factorplot(x=\"Mean Ranking\", y=\"Feature\", data = meanplot, kind=\"bar\", \n",
    "               size=14, aspect=1.9, palette='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "house = house.drop(['R&D Margin'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.730068</td>\n",
       "      <td>0.760249</td>\n",
       "      <td>0.805111</td>\n",
       "      <td>0.655488</td>\n",
       "      <td>-0.403603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.773790</td>\n",
       "      <td>0.308145</td>\n",
       "      <td>0.704052</td>\n",
       "      <td>0.533546</td>\n",
       "      <td>-0.359564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.945274</td>\n",
       "      <td>0.412487</td>\n",
       "      <td>0.720585</td>\n",
       "      <td>0.571938</td>\n",
       "      <td>-0.560198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.072875</td>\n",
       "      <td>0.324274</td>\n",
       "      <td>0.812349</td>\n",
       "      <td>0.198422</td>\n",
       "      <td>0.045933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.509411</td>\n",
       "      <td>0.567047</td>\n",
       "      <td>0.863696</td>\n",
       "      <td>0.619511</td>\n",
       "      <td>-0.192130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   TTM Rev Growth  NTM Rev Growth  GP Margin  S&M Margin  EBITDA Margin\n",
       "0        1.730068        0.760249   0.805111    0.655488      -0.403603\n",
       "1        2.773790        0.308145   0.704052    0.533546      -0.359564\n",
       "2        1.945274        0.412487   0.720585    0.571938      -0.560198\n",
       "3        1.072875        0.324274   0.812349    0.198422       0.045933\n",
       "4        0.509411        0.567047   0.863696    0.619511      -0.192130"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "# Store the column/feature names into a list \"colnames\"\n",
    "colnames = house.columns\n",
    "X = house.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(97, 5)\n",
      "(25, 5)\n",
      "(25, 5)\n"
     ]
    }
   ],
   "source": [
    "thresh = 1 * 10**(-3)\n",
    "model = XGBRegressor()\n",
    "model.fit(X_train, y_train)\n",
    "#select features using threshold\n",
    "selection = SelectFromModel(model, threshold = thresh, prefit=True)\n",
    "select_X_train = selection.transform(X_train)\n",
    "# eval model\n",
    "select_X_val = selection.transform(X_test)\n",
    "# test \n",
    "select_X_test = selection.transform(X_test)\n",
    "print(select_X_train.shape)\n",
    "print(select_X_val.shape)\n",
    "print(select_X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled_Ridge: 0.363838 (+/- 0.090397)\n",
      "Scaled_Lasso: 0.182497 (+/- 0.043711)\n",
      "Scaled_Elastic: 0.216708 (+/- 0.020035)\n",
      "Scaled_SVR: 0.309860 (+/- 0.084483)\n",
      "Scaled_RF_reg: -0.148232 (+/- 0.463847)\n",
      "Scaled_ET_reg: 0.152563 (+/- 0.191443)\n",
      "Scaled_BR_reg: -0.176548 (+/- 0.458579)\n",
      "Scaled_Hub-Reg: 0.368810 (+/- 0.070461)\n",
      "Scaled_BayRidge: 0.358826 (+/- 0.074662)\n",
      "Scaled_XGB_reg: -0.247026 (+/- 0.457687)\n",
      "Scaled_DT_reg: -0.947411 (+/- 1.443011)\n",
      "Scaled_KNN_reg: 0.141764 (+/- 0.147781)\n",
      "Scaled_ADA-Reg: 0.009306 (+/- 0.238452)\n",
      "Scaled_Linear: 0.360539 (+/- 0.096018)\n",
      "Scaled_Gboost-Reg: -0.215213 (+/- 0.413422)\n",
      "Scaled_RFR_PCA: 0.178251 (+/- 0.043719)\n",
      "Scaled_XGBR_PCA: 0.074272 (+/- 0.249772)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pipelines = []\n",
    "seed = 2\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Ridge\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Ridge\", Ridge(random_state=seed, tol=10 ))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Lasso\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", Lasso(random_state=seed, tol=1))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Elastic\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", ElasticNet(random_state=seed))\n",
    "                      ]))\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_SVR\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"SVR\",  SVR(kernel='linear', C=1e2, degree=5))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_RF_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"RF\", RandomForestRegressor(random_state=seed))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_ET_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"ET\", ExtraTreesRegressor(random_state=seed))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_BR_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"BR\", BaggingRegressor(random_state=seed))\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Hub-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Hub-Reg\", HuberRegressor())\n",
    "                 ]))) \n",
    "pipelines.append(\n",
    "                (\"Scaled_BayRidge\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"BR\", BayesianRidge())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_XGB_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"XGBR\", XGBRegressor(seed=seed))\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_DT_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"DT_reg\", DecisionTreeRegressor())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_KNN_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"KNN_reg\", KNeighborsRegressor())\n",
    "                 ])))\n",
    "pipelines.append(\n",
    "                (\"Scaled_ADA-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"ADA-reg\", AdaBoostRegressor())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Linear\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Linear\", LinearRegression())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Gboost-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"GBoost-Reg\", GradientBoostingRegressor())\n",
    "                 ])))\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_RFR_PCA\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"PCA\", PCA(n_components=3)),\n",
    "                     (\"XGB\", RandomForestRegressor())\n",
    "                 ])))\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_XGBR_PCA\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"PCA\", PCA(n_components=3)),\n",
    "                     (\"XGB\", XGBRegressor())\n",
    "                 ])))\n",
    "\n",
    "#'neg_mean_absolute_error', 'neg_mean_squared_error','r2'\n",
    "scoring = 'r2'\n",
    "n_folds = 3\n",
    "\n",
    "results, names  = [], [] \n",
    "\n",
    "for name, model  in pipelines:\n",
    "    kfold = KFold(n_splits=n_folds, random_state=seed)\n",
    "    cv_results = cross_val_score(model, X_train, y_train, cv= kfold,\n",
    "                                 scoring=scoring, n_jobs=-1)    \n",
    "    names.append(name)\n",
    "    results.append(cv_results)    \n",
    "    msg = \"%s: %f (+/- %f)\" % (name, cv_results.mean(),  cv_results.std())\n",
    "    print(msg)\n",
    "    \n",
    "# boxplot algorithm comparison\n",
    "fig = plt.figure(figsize=(15,6))\n",
    "fig.suptitle('Algorithm Comparison', fontsize=22)\n",
    "ax = fig.add_subplot(111)\n",
    "sns.boxplot(x=names, y=results)\n",
    "ax.set_xticklabels(names)\n",
    "ax.set_xlabel(\"Algorithmn Name\", fontsize=20)\n",
    "ax.set_ylabel(\"R Squared Score of Models\", fontsize=18)\n",
    "ax.set_xticklabels(ax.get_xticklabels(),rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled_Ridge: 0.363838 (+/- 0.090397)\n",
      "Scaled_Lasso: 0.182497 (+/- 0.043711)\n",
      "Scaled_Elastic: 0.216708 (+/- 0.020035)\n",
      "Scaled_SVR: 0.309860 (+/- 0.084483)\n",
      "Scaled_ET_reg: 0.152563 (+/- 0.191443)\n",
      "Scaled_Hub-Reg: 0.368810 (+/- 0.070461)\n",
      "Scaled_BayRidge: 0.358826 (+/- 0.074662)\n",
      "Scaled_KNN_reg: 0.141764 (+/- 0.147781)\n",
      "Scaled_Linear: 0.360539 (+/- 0.096018)\n",
      "Scaled_RFR_PCA: -0.074326 (+/- 0.172776)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pipelines = []\n",
    "seed = 2\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Ridge\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Ridge\", Ridge(random_state=seed, tol=10 ))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Lasso\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", Lasso(random_state=seed, tol=1))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Elastic\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", ElasticNet(random_state=seed))\n",
    "                      ]))\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_SVR\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"SVR\",  SVR(kernel='linear', C=1e2, degree=5))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_ET_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"ET\", ExtraTreesRegressor(random_state=seed))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Hub-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Hub-Reg\", HuberRegressor())\n",
    "                 ]))) \n",
    "pipelines.append(\n",
    "                (\"Scaled_BayRidge\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"BR\", BayesianRidge())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_KNN_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"KNN_reg\", KNeighborsRegressor())\n",
    "                 ])))\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Linear\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Linear\", LinearRegression())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_RFR_PCA\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"PCA\", PCA(n_components=3)),\n",
    "                     (\"XGB\", RandomForestRegressor())\n",
    "                 ])))\n",
    "\n",
    "#'neg_mean_absolute_error', 'neg_mean_squared_error','r2'\n",
    "scoring = 'r2'\n",
    "n_folds = 3\n",
    "\n",
    "results, names  = [], [] \n",
    "\n",
    "for name, model  in pipelines:\n",
    "    kfold = KFold(n_splits=n_folds, random_state=seed)\n",
    "    cv_results = cross_val_score(model, X_train, y_train, cv= kfold,\n",
    "                                 scoring=scoring, n_jobs=-1)    \n",
    "    names.append(name)\n",
    "    results.append(cv_results)    \n",
    "    msg = \"%s: %f (+/- %f)\" % (name, cv_results.mean(),  cv_results.std())\n",
    "    print(msg)\n",
    "    \n",
    "# boxplot algorithm comparison\n",
    "fig = plt.figure(figsize=(15,6))\n",
    "fig.suptitle('Algorithm Comparison', fontsize=22)\n",
    "ax = fig.add_subplot(111)\n",
    "sns.boxplot(x=names, y=results)\n",
    "ax.set_xticklabels(names)\n",
    "ax.set_xlabel(\"Algorithmn Name\", fontsize=20)\n",
    "ax.set_ylabel(\"R Squared Score of Models\", fontsize=18)\n",
    "ax.set_xticklabels(ax.get_xticklabels(),rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "-------Best score----------\n",
      "-9.574014165769116\n",
      "-------Best params----------\n",
      "{}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "Linear = pipelines[-2][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=Linear,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Ridge', Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=False, random_state=2, solver='auto', tol=10))])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipelines[-10][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "-------Best score----------\n",
      "-9.58506891363229\n",
      "-------Best params----------\n",
      "{}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "Ridge = pipelines[-10][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=Ridge,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_learning_curve(train_sizes, train_scores, test_scores, title, alpha=0.1):\n",
    "    train_scores = -train_scores\n",
    "    test_scores = -test_scores\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "    plt.plot(train_sizes, train_mean, label='train score', color='blue', marker='o')\n",
    "    plt.fill_between(train_sizes,train_mean + train_std,\n",
    "                    train_mean - train_std, color='blue', alpha=alpha)\n",
    "    plt.plot(train_sizes, test_mean, label='test score', color='red',marker='o')\n",
    "    plt.fill_between(train_sizes,test_mean + test_std, test_mean - test_std , color='red', alpha=alpha)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Number of training points')\n",
    "    plt.ylabel(r'Mean Squared Error')\n",
    "    plt.grid(ls='--')\n",
    "    plt.legend(loc='best')\n",
    "    plt.show() \n",
    "    \n",
    "# Plot the learning curve\n",
    "plt.figure(figsize=(9,6))\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "                                            grid_rf.best_estimator_ , X= select_X_train, y = y_train, \n",
    "                                            cv= 3,  scoring='neg_mean_squared_error')\n",
    "\n",
    "plot_learning_curve(train_sizes, train_scores, test_scores, title='Learning curve for RF Regressor') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Root Mean Squared Error 2.85\n"
     ]
    }
   ],
   "source": [
    "best_model = clone(grid_rf.best_estimator_)\n",
    "best_model.fit(select_X_train, y_train)\n",
    "y_pred_train = best_model.predict(select_X_train)\n",
    "\n",
    "print( \"Training Root Mean Squared Error %.2f\" %( MSE(y_train, y_pred_train)**(1/2) ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error on Holdout Set 3.185516\n"
     ]
    }
   ],
   "source": [
    "y_pred_val = best_model.predict(select_X_val)\n",
    "print(\"Root Mean Squared Error on Holdout Set %f\" %(MSE(y_test, y_pred_val)**(1/2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x15= range(14)\n",
    "plt.plot(x15,x15)\n",
    "plt.scatter(y_pred_val, y_test)\n",
    "plt.suptitle(\"Actual vs. Predicted\")\n",
    "plt.xlabel(\"y predicted\")\n",
    "plt.ylabel(\"Actutal\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x20dda971ac8>"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred_val, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test1 = y_test\n",
    "y_pred1 = y_pred_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4.70156616,  4.90178991,  4.90675287,  5.27112198,  5.85765397,\n",
       "        5.8905947 ,  5.93687665,  6.02818677,  6.10629906,  6.2060313 ,\n",
       "        6.43599447,  6.60174841,  6.80284292,  6.81882521,  7.28431036,\n",
       "        7.49876359,  7.50352371,  7.88829159,  8.10194556,  8.37670444,\n",
       "        9.01683395,  9.15672648,  9.75829276, 10.20441009, 11.52723404])"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6.02818677,  4.70156616,  8.10194556, 10.20441009,  7.50352371,\n",
       "        9.15672648, 11.52723404,  5.8905947 ,  6.80284292,  7.49876359,\n",
       "        8.37670444,  4.90178991,  6.60174841,  7.88829159,  9.75829276,\n",
       "        4.90675287,  5.85765397,  6.81882521,  7.28431036,  9.01683395,\n",
       "        6.2060313 ,  6.43599447,  5.93687665,  6.10629906,  5.27112198])"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_sort = y_pred1.sort()\n",
    "y_pred_sort = np.asarray(y_pred_sort)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_sort = y_test1.sort()\n",
    "y_test_sort = np.asarray(y_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.89221863,  2.26728987,  3.12612344,  3.23693815,  3.68408054,\n",
       "        3.9623645 ,  4.28191736,  4.78229228,  5.48553055,  5.4928569 ,\n",
       "        6.50295851,  6.79957807,  6.8152068 ,  7.20065257,  7.49446165,\n",
       "        8.76722326,  9.12422491,  9.16235139, 10.49736688, 10.73443143,\n",
       "       11.85648084, 12.34100291, 14.55480168, 14.87319187, 14.99891246])"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_sort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(None, dtype=object)"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_sort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([11.85648084, 12.34100291, 14.55480168, 14.87319187, 14.99891246])"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yt_max = y_test_sort[-5:]\n",
    "yt_max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "too many indices for array",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-209-f0a9acd0ede4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mypred_max\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my_pred_sort\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mypred_max\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: too many indices for array"
     ]
    }
   ],
   "source": [
    "ypred_max = y_pred_sort[-5:]\n",
    "ypred_max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ypred_max' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-210-5f7f97ec10be>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mymax_dif\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0myt_max\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mypred_max\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mstats\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mymax_dif\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'ypred_max' is not defined"
     ]
    }
   ],
   "source": [
    "ymax_dif = yt_max - ypred_max\n",
    "stats.describe(ymax_dif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Hub-Reg', HuberRegressor(alpha=0.0001, epsilon=1.35, fit_intercept=True, max_iter=100,\n",
       "        tol=1e-05, warm_start=False))])"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " pipelines[-5][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HubReg = pipelines[-5][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "    'Hub-Reg__epsilon' : [1.0, 1.1, 1.2, 1.3, 1.35, 1.5, 1.6,1.7,1.8,2.0,3.0,3.5,4.0,100],\n",
    "    'Hub-Reg__max_iter' : [25,50,100,200,300]\n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=HubReg,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_learning_curve(train_sizes, train_scores, test_scores, title, alpha=0.1):\n",
    "    train_scores = -train_scores\n",
    "    test_scores = -test_scores\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "    plt.plot(train_sizes, train_mean, label='train score', color='blue', marker='o')\n",
    "    plt.fill_between(train_sizes,train_mean + train_std,\n",
    "                    train_mean - train_std, color='blue', alpha=alpha)\n",
    "    plt.plot(train_sizes, test_mean, label='test score', color='red',marker='o')\n",
    "    plt.fill_between(train_sizes,test_mean + test_std, test_mean - test_std , color='red', alpha=alpha)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Number of training points')\n",
    "    plt.ylabel(r'Mean Squared Error')\n",
    "    plt.grid(ls='--')\n",
    "    plt.legend(loc='best')\n",
    "    plt.show() \n",
    "    \n",
    "# Plot the learning curve\n",
    "plt.figure()\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "                                            grid_rf.best_estimator_ , X= select_X_train, y = y_train, \n",
    "                                            cv= 3,  scoring='neg_mean_squared_error')\n",
    "\n",
    "plot_learning_curve(train_sizes, train_scores, test_scores, title='Learning curve for RF Regressor') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Ridge', Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=False, random_state=2, solver='auto', tol=10))])"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_rf.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8.48214724,  8.43134211, 15.77760471, 13.27660805,  4.49080743,\n",
       "        4.44630766,  4.96264693,  5.2914646 ,  6.84868216,  4.74596822,\n",
       "        5.05213276, 13.78150188,  4.56664775,  4.65973052,  3.78455515,\n",
       "        5.39720353, 10.37207354,  6.41658722,  3.17006192,  8.80580838,\n",
       "        3.99454805,  9.05145434,  5.47094954,  2.98726037,  4.29730555,\n",
       "        5.19454454,  9.6796096 ,  6.17114403, 13.11747675,  9.6667303 ,\n",
       "        6.75055581,  6.87848296, 13.29596562,  5.54971901,  7.72639986,\n",
       "        4.76039301,  9.5690336 ,  2.5730514 ,  2.09464877, 12.17994135,\n",
       "        3.68769072,  5.04037828,  8.43144049,  5.8193585 ,  6.02972031,\n",
       "        2.0845468 ,  4.02792443,  4.38613182, 11.84840509,  6.52492179,\n",
       "        2.1984071 ,  7.05736597,  9.9139303 ,  3.17163954,  8.09039773,\n",
       "        1.25645126,  8.91615601,  8.4059795 ,  5.34469006,  9.23674822,\n",
       "        8.63178225, 14.86141948,  6.6975161 ,  1.37986728,  9.78354475,\n",
       "        6.07391287,  4.18297826,  7.57903095, 17.24465707,  6.75344914,\n",
       "        6.58486142, 16.75127054,  6.47357623, 10.84657012,  4.65608041,\n",
       "        5.21939517, 10.48370926, 13.07916859,  8.82288275,  4.48923814,\n",
       "        8.6072937 , 11.05783691,  4.385155  ,  8.8287788 ,  2.25803763,\n",
       "       13.69596842,  8.79129898,  3.35054997,  5.50556778, 11.57891232,\n",
       "       10.87628624, 22.46783098,  5.69244286,  6.87166276, 16.24458722,\n",
       "       10.6739201 ,  3.59618181])"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('BR', BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, compute_score=False, copy_X=True,\n",
       "       fit_intercept=True, lambda_1=1e-06, lambda_2=1e-06, n_iter=300,\n",
       "       normalize=False, tol=0.001, verbose=False))])"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipelines[-4][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "BayRidge = pipelines[-4][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "    'BR__n_iter' : [200],\n",
    "    'BR__alpha_1' : [1e-06,1e-04,1e-05,1e-03,1e-02],\n",
    "    'BR__alpha_2' : [1e-06,1e-04,1e-05,1e-03,1e-02],\n",
    "    'BR__lambda_1' : [1e-06,1e-04,1e-05,1e-03,1e-02],\n",
    "    'BR__lambda_2' : [1e-06,1e-04,1e-05,1e-03,1e-02]\n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=BayRidge,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_learning_curve(train_sizes, train_scores, test_scores, title, alpha=0.1):\n",
    "    train_scores = -train_scores\n",
    "    test_scores = -test_scores\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "    plt.plot(train_sizes, train_mean, label='train score', color='blue', marker='o')\n",
    "    plt.fill_between(train_sizes,train_mean + train_std,\n",
    "                    train_mean - train_std, color='blue', alpha=alpha)\n",
    "    plt.plot(train_sizes, test_mean, label='test score', color='red',marker='o')\n",
    "    plt.fill_between(train_sizes,test_mean + test_std, test_mean - test_std , color='red', alpha=alpha)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Number of training points')\n",
    "    plt.ylabel(r'Mean Squared Error')\n",
    "    plt.grid(ls='--')\n",
    "    plt.legend(loc='best')\n",
    "    plt.show() \n",
    "    \n",
    "# Plot the learning curve\n",
    "plt.figure(figsize=(9,6))\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "                                            grid_rf.best_estimator_ , X= select_X_train, y = y_train, \n",
    "                                            cv= 3,  scoring='neg_mean_squared_error')\n",
    "\n",
    "plot_learning_curve(train_sizes, train_scores, test_scores, title='Learning curve for RF Regressor') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model = clone(grid_rf.best_estimator_)\n",
    "best_model.fit(select_X_train, y_train)\n",
    "y_pred_train = best_model.predict(select_X_train)\n",
    "\n",
    "print( \"Training Root Mean Squared Error %.2f\" %( MSE(y_train, y_pred_train)**(1/2) ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_val = best_model.predict(select_X_val)\n",
    "print(\"Root Mean Squared Error on Holdout Set %f\" %(MSE(y_test, y_pred_val)**(1/2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(x15,x15)\n",
    "plt.scatter(y_pred_val, y_test)\n",
    "plt.suptitle(\"Residual plot for the hold out set\")\n",
    "plt.xlabel(\"y predicted\")\n",
    "plt.ylabel(\"actual\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "db_pred = best_model.predict(db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "actualdb = db_pred + 4.696671\n",
    "actualdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "databricks = [1.24719232418189,0.951862931344295,0.671300585943595,0.981899434820076,-1.14895360823323]\n",
    "db = pd.DataFrame([databricks])\n",
    "db = db.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "_change_revision": 0,
  "_is_fork": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
