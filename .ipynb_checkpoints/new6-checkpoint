{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "6ea51bc1-c7e6-5022-f91e-5933202f9f3a",
    "_uuid": "cde1f7416981edcc7951bbc7a4928933b7ba3760"
   },
   "source": [
    "#INTRODUCTION \n",
    "\n",
    "**Caveat** : Running this notebook will take a while if you do decide to fork so take note. A handful of minutes.\n",
    "\n",
    "This notebook will aim to provide an explanation and application of different feature ranking methods, namely that of Recursive Feature Elimination (RFE), Stability Selection, linear models as well as Random Forest. But first off, it is always imperative to give credit where credit is due. The stuff in this notebook is indebted to and borrows heavily from the excellent 4-part blog article by Ando Saabas on feature selection. So please do check out his article from this link: http://blog.datadive.net/selecting-good-features-part-iv-stability-selection-rfe-and-everything-side-by-side/ \n",
    "\n",
    "The contents of this notebook are as follows: \n",
    "\n",
    " 1. **Data Cleaning and Visualisation** : This section will revolve around exploring the data and visualising some summary statistics. \n",
    " 2. **Stability Selection via Randomised Lasso Method** : Introduce a relatively new feature selection method called \"Stability Selection\" and using the Randomised Lasso in its implementation\n",
    " 3. **Recursive Feature Elimination** : Implementing the Recursive Feature Elimination method of feature ranking via the use of basic Linear Regression \n",
    " 4. **Linear Model Feature Coefficients** : Implementing 3 of Sklearn's linear models (Linear Regression, Lasso and Ridge) and using the inbuilt estimated coefficients for our feature selection\n",
    " 5. **Random Forest Feature Selection** : Using the Random Forest's convenient attribute \"feature_importances\" to calculate and ultimately rank the feature importance.\n",
    "\n",
    "Finally, with all the points 1 to 5 above, we will combine the results to create our:\n",
    "\n",
    "**Feature Ranking Matrix** : Matrix of all the features along with the respective model scores which we can use in our ranking.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {
    "_cell_guid": "15b3d941-c4a4-4c3f-bef1-4c4fcce4a33a",
    "_uuid": "8e0e4f54f2e722ae2cbf175d284d3a3cc0baf024",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "from sklearn.feature_selection import RFE, f_regression\n",
    "from sklearn.linear_model import (LinearRegression, Ridge, Lasso, RandomizedLasso)\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score # to split the data\n",
    "from sklearn.metrics import explained_variance_score, median_absolute_error, r2_score, mean_squared_error, accuracy_score, confusion_matrix, classification_report, fbeta_score #To evaluate our model\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.linear_model import SGDRegressor\n",
    "from sklearn.model_selection import KFold, cross_val_score, train_test_split # Model evaluation\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler # Preprocessing\n",
    "from sklearn.linear_model import Lasso, Ridge, ElasticNet, RANSACRegressor, SGDRegressor, HuberRegressor, BayesianRidge # Linear models\n",
    "from sklearn.ensemble import RandomForestRegressor, BaggingRegressor, AdaBoostRegressor, GradientBoostingRegressor, ExtraTreesRegressor  # Ensemble methods\n",
    "from xgboost import XGBRegressor, plot_importance # XGBoost\n",
    "from sklearn.svm import SVR, SVC, LinearSVC  # Support Vector Regression\n",
    "from sklearn.tree import DecisionTreeRegressor # Decision Tree Regression\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.pipeline import Pipeline # Streaming pipelines\n",
    "from sklearn.decomposition import KernelPCA, PCA # Dimensionality reduction\n",
    "from sklearn.feature_selection import SelectFromModel # Dimensionality reduction\n",
    "from sklearn.model_selection import learning_curve, validation_curve, GridSearchCV # Model evaluation\n",
    "from sklearn.base import clone # Clone estimator\n",
    "from sklearn.metrics import mean_squared_error as MSE\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "2b932325-d368-ee17-75cb-40feb7e8d1bf",
    "_uuid": "5c3eb6eb38eb2cb7a119a52df82845d57d815a98"
   },
   "source": [
    "# 1. DATA CLEANSING AND ANALYSIS\n",
    "\n",
    "Let's first read in the house data as a dataframe \"house\" and inspect the first 5 rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "_cell_guid": "1ca75509-383d-c6f5-d809-8a0e99b4e844",
    "_uuid": "ee8644c1339dc96ddffb9dea31086f76624e26eb",
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>EV/TTM</th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>R&amp;D Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SMAR US Equity</td>\n",
       "      <td>22.467831</td>\n",
       "      <td>1.730068</td>\n",
       "      <td>0.760249</td>\n",
       "      <td>0.805111</td>\n",
       "      <td>0.337879</td>\n",
       "      <td>0.655488</td>\n",
       "      <td>-0.403603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OKTA US EQUITY</td>\n",
       "      <td>17.244657</td>\n",
       "      <td>2.773790</td>\n",
       "      <td>0.308145</td>\n",
       "      <td>0.704052</td>\n",
       "      <td>0.218452</td>\n",
       "      <td>0.533546</td>\n",
       "      <td>-0.359564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MDB US Equity</td>\n",
       "      <td>16.751271</td>\n",
       "      <td>1.945274</td>\n",
       "      <td>0.412487</td>\n",
       "      <td>0.720585</td>\n",
       "      <td>0.323563</td>\n",
       "      <td>0.571938</td>\n",
       "      <td>-0.560198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TEAM US Equity</td>\n",
       "      <td>16.244587</td>\n",
       "      <td>1.072875</td>\n",
       "      <td>0.324274</td>\n",
       "      <td>0.812349</td>\n",
       "      <td>0.438849</td>\n",
       "      <td>0.198422</td>\n",
       "      <td>0.045933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TENB US Equity</td>\n",
       "      <td>15.777605</td>\n",
       "      <td>0.509411</td>\n",
       "      <td>0.567047</td>\n",
       "      <td>0.863696</td>\n",
       "      <td>0.307217</td>\n",
       "      <td>0.619511</td>\n",
       "      <td>-0.192130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Ticker     EV/TTM  TTM Rev Growth  NTM Rev Growth  GP Margin  \\\n",
       "0  SMAR US Equity  22.467831        1.730068        0.760249   0.805111   \n",
       "1  OKTA US EQUITY  17.244657        2.773790        0.308145   0.704052   \n",
       "2   MDB US Equity  16.751271        1.945274        0.412487   0.720585   \n",
       "3  TEAM US Equity  16.244587        1.072875        0.324274   0.812349   \n",
       "4  TENB US Equity  15.777605        0.509411        0.567047   0.863696   \n",
       "\n",
       "   R&D Margin  S&M Margin  EBITDA Margin  \n",
       "0    0.337879    0.655488      -0.403603  \n",
       "1    0.218452    0.533546      -0.359564  \n",
       "2    0.323563    0.571938      -0.560198  \n",
       "3    0.438849    0.198422       0.045933  \n",
       "4    0.307217    0.619511      -0.192130  "
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house = pd.read_csv(\"newdata2.csv\")\n",
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "_cell_guid": "b6d0eee1-089e-e880-982a-a81d8f36a899",
    "_uuid": "cd35006e81ba37d1832711d82dcfe89b634802f8",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Dropping the id and date columns\n",
    "house = house.drop(house.columns[0],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EV/TTM</th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>R&amp;D Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>122.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.543058</td>\n",
       "      <td>0.528432</td>\n",
       "      <td>0.216193</td>\n",
       "      <td>0.707211</td>\n",
       "      <td>0.200162</td>\n",
       "      <td>0.341511</td>\n",
       "      <td>0.028646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.959135</td>\n",
       "      <td>0.488850</td>\n",
       "      <td>0.182720</td>\n",
       "      <td>0.121692</td>\n",
       "      <td>0.096074</td>\n",
       "      <td>0.161951</td>\n",
       "      <td>0.241920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.256451</td>\n",
       "      <td>0.017831</td>\n",
       "      <td>0.008429</td>\n",
       "      <td>0.310098</td>\n",
       "      <td>0.025551</td>\n",
       "      <td>0.032649</td>\n",
       "      <td>-1.114374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.589006</td>\n",
       "      <td>0.194930</td>\n",
       "      <td>0.093431</td>\n",
       "      <td>0.640323</td>\n",
       "      <td>0.135206</td>\n",
       "      <td>0.209131</td>\n",
       "      <td>-0.114647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.752002</td>\n",
       "      <td>0.404623</td>\n",
       "      <td>0.181635</td>\n",
       "      <td>0.714583</td>\n",
       "      <td>0.182750</td>\n",
       "      <td>0.309757</td>\n",
       "      <td>0.042316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.676390</td>\n",
       "      <td>0.656987</td>\n",
       "      <td>0.287955</td>\n",
       "      <td>0.797478</td>\n",
       "      <td>0.246220</td>\n",
       "      <td>0.446033</td>\n",
       "      <td>0.195914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>22.467831</td>\n",
       "      <td>2.773790</td>\n",
       "      <td>1.279817</td>\n",
       "      <td>0.949200</td>\n",
       "      <td>0.627796</td>\n",
       "      <td>0.726084</td>\n",
       "      <td>0.500626</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           EV/TTM  TTM Rev Growth  NTM Rev Growth   GP Margin  R&D Margin  \\\n",
       "count  122.000000      122.000000      122.000000  122.000000  122.000000   \n",
       "mean     7.543058        0.528432        0.216193    0.707211    0.200162   \n",
       "std      3.959135        0.488850        0.182720    0.121692    0.096074   \n",
       "min      1.256451        0.017831        0.008429    0.310098    0.025551   \n",
       "25%      4.589006        0.194930        0.093431    0.640323    0.135206   \n",
       "50%      6.752002        0.404623        0.181635    0.714583    0.182750   \n",
       "75%      9.676390        0.656987        0.287955    0.797478    0.246220   \n",
       "max     22.467831        2.773790        1.279817    0.949200    0.627796   \n",
       "\n",
       "       S&M Margin  EBITDA Margin  \n",
       "count  122.000000     122.000000  \n",
       "mean     0.341511       0.028646  \n",
       "std      0.161951       0.241920  \n",
       "min      0.032649      -1.114374  \n",
       "25%      0.209131      -0.114647  \n",
       "50%      0.309757       0.042316  \n",
       "75%      0.446033       0.195914  \n",
       "max      0.726084       0.500626  "
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "c0b6dced-bb93-bf29-2a27-4a5b0a05d185",
    "_uuid": "b5085a15f47eeca65b2999a3371230979751c288"
   },
   "source": [
    "**Pairplot Visualisation**\n",
    "\n",
    "Let's create some Seaborn pairplots for the features ('sqft_lot','sqft_above','price','sqft_living','bedrooms') to get a feel for how the various features are distributed vis-a-vis the price as well as the number of bedrooms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "_cell_guid": "2a9dbedc-9be7-f89d-a855-f21738d72e17",
    "_uuid": "74c725f2563ccb6d1bd9fe35a85d36dfb9488d9c",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#sns.pairplot(house[['sqft_lot','sqft_above','price','sqft_living','bedrooms']], hue='bedrooms', palette='afmhot',size=1.4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "222bcbc2-3f3d-9ca0-f30f-757206f923d5",
    "_uuid": "e7f9d812082c1de0ac06a05d5efa2be1b4cdeb3e"
   },
   "source": [
    "From the pairplots, we seem to get the classical linear distribution of the data points, for example with price against sqft_living. This bodes well as in the latter analysis, we will implement some linear models which we will use in our Feature ranking. Let's look at the correlation heatmap: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {
    "_cell_guid": "1d179a59-c663-ef84-c66f-cb8e43226a7c",
    "_uuid": "f2c6729c00b5f2be3cd522e96a4cacfb899a3e02",
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x20dda9cefd0>"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "str_list = [] # empty list to contain columns with strings (words)\n",
    "for colname, colvalue in house.iteritems():\n",
    "    if type(colvalue[1]) == str:\n",
    "         str_list.append(colname)\n",
    "# Get to the numeric columns by inversion            \n",
    "num_list = house.columns.difference(str_list) \n",
    "# Create Dataframe containing only numerical features\n",
    "house_num = house[num_list]\n",
    "f, ax = plt.subplots(figsize=(16, 12))\n",
    "plt.title('Pearson Correlation of features')\n",
    "# Draw the heatmap using seaborn\n",
    "#sns.heatmap(house_num.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, cmap=\"PuBuGn\", linecolor='k', annot=True)\n",
    "sns.heatmap(house_num.astype(float).corr(),linewidths=0.25,vmax=1.0, square=True, cmap=\"cubehelix\", linecolor='k', annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "fc3d8109-ebc5-264c-f964-04f66da0fec0",
    "_uuid": "a3668fbd5d02ee623aaf7f2cbc430c8301989db3"
   },
   "source": [
    "# 2. Stability Selection via Randomized Lasso\n",
    "\n",
    "In a nutshell, this method serves to apply the feature selection on different parts of the data and features repeatedly until the results can be aggregated. Therefore stronger features ( defined as being selected as important) will have greater scores in this method as compared to weaker features. Refer to this paper by Nicolai Meinshausen and Peter Buhlmann for a much greater detail on the method : http://stat.ethz.ch/~nicolai/stability.pdf\n",
    "\n",
    "In this notebook, the Stability Selection method is conveniently inbuilt into sklearn's randomized lasso model and therefore this will be implemented as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "_cell_guid": "45351992-0216-dd3d-76fe-4a658674f0c4",
    "_uuid": "f7b3717f89e357ee844277dde65f298fd2804276",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:6: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# First extract the target variable which is our House prices\n",
    "Y = house['EV/TTM']\n",
    "Y = Y.values.ravel()\n",
    "# Drop price from the house dataframe and create a matrix out of the house data\n",
    "house = house.drop(['EV/TTM'], axis=1)\n",
    "X = house.as_matrix()\n",
    "# Store the column/feature names into a list \"colnames\"\n",
    "colnames = house.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['TTM Rev Growth', 'NTM Rev Growth', 'GP Margin', 'R&D Margin',\n",
       "       'S&M Margin', 'EBITDA Margin'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "colnames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "1c239bb6-b82e-e35b-7c3c-580c98094cce",
    "_uuid": "1a7926be983626aa6889161a19eee043eef24051"
   },
   "source": [
    "Next, we create a function which will be able to conveniently store our feature rankings obtained from the various methods described here into a Python dictionary. In case you are thinking I created this function, no this is not the case. All credit goes to Ando Saabas and I am only trying to apply what he has discussed in the context of this dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "_cell_guid": "ecc7b17a-b6d5-7d6c-726d-de7b75c3c1eb",
    "_uuid": "c92f382f667f648e7679f4b8b48100dd56273119",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Define dictionary to store our rankings\n",
    "ranks = {}\n",
    "# Create our function which stores the feature rankings to the ranks dictionary\n",
    "def ranking(ranks, names, order=1):\n",
    "    minmax = MinMaxScaler()\n",
    "    ranks = minmax.fit_transform(order*np.array([ranks]).T).T[0]\n",
    "    ranks = map(lambda x: round(x,2), ranks)\n",
    "    return dict(zip(names, ranks))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {
    "_cell_guid": "a56e6fbf-1511-2ff7-0693-2f55aa0d21cd",
    "_uuid": "53bdbc76d42cb608da895a5f57f50d6a714bbb4d",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:58: DeprecationWarning: Class RandomizedLasso is deprecated; The class RandomizedLasso is deprecated in 0.19 and will be removed in 0.21.\n",
      "  warnings.warn(msg, category=DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finished\n"
     ]
    }
   ],
   "source": [
    "# Finally let's run our Selection Stability method with Randomized Lasso\n",
    "rlasso = RandomizedLasso(alpha=0.04)\n",
    "rlasso.fit(X, Y)\n",
    "ranks[\"rlasso/Stability\"] = ranking(np.abs(rlasso.scores_), colnames)\n",
    "print('finished')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "15244118-31f5-e2df-8ce0-34a6d8f5c729",
    "_uuid": "e4620d40f9df515483eb62a507425f74345ca99f"
   },
   "source": [
    "# 3. Recursive Feature Elimination ( RFE )\n",
    "\n",
    "Now onto the next method in our feature ranking endeavour. Recursive Feature Elimination or RFE uses a model ( eg. linear Regression or SVM) to select either the best or worst-performing feature, and then excludes this feature. The whole process is then iterated until all features in the dataset are used up ( or up to a user-defined limit). Sklearn conveniently possesses a RFE function via the sklearn.feature_selection call and we will use this along with a simple linear regression model for our ranking search as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {
    "_cell_guid": "e11f8021-2f8b-074b-d0cc-c6d9d6d8ae8e",
    "_uuid": "f4c3fbbc4edeca6db3b183ed14790cb87f638c73",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting estimator with 6 features.\n",
      "Fitting estimator with 5 features.\n",
      "Fitting estimator with 4 features.\n",
      "Fitting estimator with 3 features.\n",
      "Fitting estimator with 2 features.\n"
     ]
    }
   ],
   "source": [
    "# Construct our Linear Regression model\n",
    "lr = LinearRegression(normalize=True)\n",
    "lr.fit(X,Y)\n",
    "#stop the search when only the last feature is left\n",
    "rfe = RFE(lr, n_features_to_select=1, verbose =3 )\n",
    "rfe.fit(X,Y)\n",
    "ranks[\"RFE\"] = ranking(list(map(float, rfe.ranking_)), colnames, order=-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "c6457163-f8c0-85a7-d69f-5ca2a880010f",
    "_uuid": "757117f801fb02d422a4e768e40a380e838e57df"
   },
   "source": [
    "# 4. Linear Model Feature Ranking\n",
    "\n",
    "Now let's apply 3 different linear models (Linear, Lasso and Ridge Regression) and how the features are selected and prioritised via these models. To achieve this, I shall use the sklearn implementation of these models and in particular the attribute .coef to return the estimated coefficients for each feature in the linear model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {
    "_cell_guid": "64b0534b-c62a-7d85-e181-615b7a3743c9",
    "_uuid": "7eae3169285b35f76de75292ae4f6091c31960a9",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Using Linear Regression\n",
    "lr = LinearRegression(normalize=True)\n",
    "lr.fit(X,Y)\n",
    "ranks[\"LinReg\"] = ranking(np.abs(lr.coef_), colnames)\n",
    "\n",
    "# Using Ridge \n",
    "ridge = Ridge(alpha = 7)\n",
    "ridge.fit(X,Y)\n",
    "ranks['Ridge'] = ranking(np.abs(ridge.coef_), colnames)\n",
    "\n",
    "# Using Lasso\n",
    "lasso = Lasso(alpha=.05)\n",
    "lasso.fit(X, Y)\n",
    "ranks[\"Lasso\"] = ranking(np.abs(lasso.coef_), colnames)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "ee729bd0-270e-dc30-8fc8-b2d79873c4e1",
    "_uuid": "edb4e6e2625bb63f06d53dd9db73402a83575b9a"
   },
   "source": [
    "# 5. Random Forest feature ranking\n",
    "\n",
    "Sklearn's Random Forest model also comes with it's own inbuilt feature ranking attribute and one can conveniently just call it via \"feature_importances_\". That is what we will be using as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "_cell_guid": "f013dad9-8855-530f-f792-48163dab2457",
    "_uuid": "f8ab99420883f6e3391bdb97048454c03e9c4f8a",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "building tree 1 of 50building tree 2 of 50building tree 3 of 50\n",
      "building tree 4 of 50\n",
      "\n",
      "\n",
      "building tree 5 of 50\n",
      "building tree 6 of 50\n",
      "building tree 7 of 50\n",
      "building tree 8 of 50\n",
      "building tree 9 of 50\n",
      "building tree 10 of 50\n",
      "building tree 11 of 50\n",
      "building tree 12 of 50building tree 13 of 50\n",
      "building tree 14 of 50\n",
      "\n",
      "building tree 15 of 50\n",
      "building tree 16 of 50\n",
      "building tree 17 of 50\n",
      "building tree 18 of 50building tree 19 of 50\n",
      "\n",
      "building tree 20 of 50building tree 21 of 50\n",
      "\n",
      "building tree 22 of 50building tree 23 of 50building tree 24 of 50\n",
      "\n",
      "\n",
      "building tree 25 of 50\n",
      "building tree 26 of 50\n",
      "building tree 27 of 50\n",
      "building tree 28 of 50building tree 29 of 50\n",
      "\n",
      "building tree 30 of 50\n",
      "building tree 31 of 50\n",
      "building tree 32 of 50\n",
      "building tree 33 of 50\n",
      "building tree 34 of 50\n",
      "building tree 35 of 50\n",
      "building tree 36 of 50\n",
      "building tree 37 of 50building tree 38 of 50\n",
      "\n",
      "building tree 39 of 50\n",
      "building tree 40 of 50\n",
      "building tree 41 of 50\n",
      "building tree 42 of 50\n",
      "building tree 43 of 50\n",
      "building tree 44 of 50building tree 45 of 50\n",
      "\n",
      "building tree 46 of 50\n",
      "building tree 47 of 50\n",
      "building tree 48 of 50\n",
      "building tree 49 of 50building tree 50 of 50\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  24 tasks      | elapsed:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestRegressor(n_jobs=-1, n_estimators=50, verbose=3)\n",
    "rf.fit(X,Y)\n",
    "ranks[\"RF\"] = ranking(rf.feature_importances_, colnames);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "20ed4bd0-29b6-86a8-0bb8-cd34424376d5",
    "_uuid": "37dd6667f94db4526867b21b3375df16954610ef"
   },
   "source": [
    "# 6. Creating the Feature Ranking Matrix\n",
    "\n",
    "We combine the scores from the various methods above and output it in a matrix form for convenient viewing as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {
    "_cell_guid": "b6eb5b25-cc7e-f1eb-6a7b-8f591b7e560e",
    "_uuid": "e09a8414122d190ae530b4dcc8b59bf7c6a4d82a",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tLasso\tLinReg\tRF\tRFE\tRidge\trlasso/Stability\tMean\n",
      "TTM Rev Growth\t0.44\t0.0\t0.36\t0.0\t1.0\t0.97\t0.46\n",
      "NTM Rev Growth\t1.0\t0.47\t1.0\t1.0\t0.98\t1.0\t0.91\n",
      "GP Margin\t0.24\t1.0\t0.12\t0.8\t0.27\t0.31\t0.46\n",
      "R&D Margin\t0.0\t0.35\t0.0\t0.2\t0.0\t0.06\t0.1\n",
      "S&M Margin\t0.0\t0.82\t0.01\t0.6\t0.0\t0.0\t0.24\n",
      "EBITDA Margin\t0.09\t0.6\t0.09\t0.4\t0.26\t0.28\t0.29\n"
     ]
    }
   ],
   "source": [
    "# Create empty dictionary to store the mean value calculated from all the scores\n",
    "r = {}\n",
    "for name in colnames:\n",
    "    r[name] = round(np.mean([ranks[method][name] \n",
    "                             for method in ranks.keys()]), 2)\n",
    " \n",
    "methods = sorted(ranks.keys())\n",
    "ranks[\"Mean\"] = r\n",
    "methods.append(\"Mean\")\n",
    " \n",
    "print(\"\\t%s\" % \"\\t\".join(methods))\n",
    "for name in colnames:\n",
    "    print(\"%s\\t%s\" % (name, \"\\t\".join(map(str, \n",
    "                         [ranks[method][name] for method in methods]))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "5d9d44d0-fd8d-894e-657f-81762195499c",
    "_uuid": "4b68741c8ffc59327db34488273b990a5fa6c6aa"
   },
   "source": [
    "Now, with the matrix above, the numbers and layout does not seem very easy or pleasant to the eye. Therefore, let's just collate the mean ranking score attributed to each of the feature and plot that via Seaborn's factorplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {
    "_cell_guid": "daae301e-e669-b2b6-6978-cbcad579696c",
    "_uuid": "d798434946ba4507b1138a5ece8647c757b763b9",
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Put the mean scores into a Pandas dataframe\n",
    "meanplot = pd.DataFrame(list(r.items()), columns= ['Feature','Mean Ranking'])\n",
    "\n",
    "# Sort the dataframe\n",
    "meanplot = meanplot.sort_values('Mean Ranking', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "_cell_guid": "2bdfa64e-d23d-d042-5e9d-080beb245ece",
    "_uuid": "3f78ab9b8271d36d4405ef83b3fac1609f2c6e2a",
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
      "  warnings.warn(msg)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:3672: UserWarning: The `size` paramter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x20dd94b6cc0>"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1915.2x1008 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot the ranking of the features\n",
    "sns.factorplot(x=\"Mean Ranking\", y=\"Feature\", data = meanplot, kind=\"bar\", \n",
    "               size=14, aspect=1.9, palette='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "house = house.drop(['R&D Margin'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.730068</td>\n",
       "      <td>0.760249</td>\n",
       "      <td>0.805111</td>\n",
       "      <td>0.655488</td>\n",
       "      <td>-0.403603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.773790</td>\n",
       "      <td>0.308145</td>\n",
       "      <td>0.704052</td>\n",
       "      <td>0.533546</td>\n",
       "      <td>-0.359564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.945274</td>\n",
       "      <td>0.412487</td>\n",
       "      <td>0.720585</td>\n",
       "      <td>0.571938</td>\n",
       "      <td>-0.560198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.072875</td>\n",
       "      <td>0.324274</td>\n",
       "      <td>0.812349</td>\n",
       "      <td>0.198422</td>\n",
       "      <td>0.045933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.509411</td>\n",
       "      <td>0.567047</td>\n",
       "      <td>0.863696</td>\n",
       "      <td>0.619511</td>\n",
       "      <td>-0.192130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   TTM Rev Growth  NTM Rev Growth  GP Margin  S&M Margin  EBITDA Margin\n",
       "0        1.730068        0.760249   0.805111    0.655488      -0.403603\n",
       "1        2.773790        0.308145   0.704052    0.533546      -0.359564\n",
       "2        1.945274        0.412487   0.720585    0.571938      -0.560198\n",
       "3        1.072875        0.324274   0.812349    0.198422       0.045933\n",
       "4        0.509411        0.567047   0.863696    0.619511      -0.192130"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "# Store the column/feature names into a list \"colnames\"\n",
    "colnames = house.columns\n",
    "X = house.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(97, 5)\n",
      "(25, 5)\n",
      "(25, 5)\n"
     ]
    }
   ],
   "source": [
    "thresh = 1 * 10**(-3)\n",
    "model = XGBRegressor()\n",
    "model.fit(X_train, y_train)\n",
    "#select features using threshold\n",
    "selection = SelectFromModel(model, threshold = thresh, prefit=True)\n",
    "select_X_train = selection.transform(X_train)\n",
    "# eval model\n",
    "select_X_val = selection.transform(X_test)\n",
    "# test \n",
    "select_X_test = selection.transform(X_test)\n",
    "print(select_X_train.shape)\n",
    "print(select_X_val.shape)\n",
    "print(select_X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled_Ridge: 0.363838 (+/- 0.090397)\n",
      "Scaled_Lasso: 0.182497 (+/- 0.043711)\n",
      "Scaled_Elastic: 0.216708 (+/- 0.020035)\n",
      "Scaled_SVR: 0.309860 (+/- 0.084483)\n",
      "Scaled_RF_reg: -0.148232 (+/- 0.463847)\n",
      "Scaled_ET_reg: 0.152563 (+/- 0.191443)\n",
      "Scaled_BR_reg: -0.176548 (+/- 0.458579)\n",
      "Scaled_Hub-Reg: 0.368810 (+/- 0.070461)\n",
      "Scaled_BayRidge: 0.358826 (+/- 0.074662)\n",
      "Scaled_XGB_reg: -0.247026 (+/- 0.457687)\n",
      "Scaled_DT_reg: -0.542849 (+/- 0.915546)\n",
      "Scaled_KNN_reg: 0.141764 (+/- 0.147781)\n",
      "Scaled_ADA-Reg: 0.024567 (+/- 0.186229)\n",
      "Scaled_Linear: 0.360539 (+/- 0.096018)\n",
      "Scaled_Gboost-Reg: -0.285864 (+/- 0.531672)\n",
      "Scaled_RFR_PCA: 0.016314 (+/- 0.126935)\n",
      "Scaled_XGBR_PCA: 0.074272 (+/- 0.249772)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pipelines = []\n",
    "seed = 2\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Ridge\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Ridge\", Ridge(random_state=seed, tol=10 ))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Lasso\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", Lasso(random_state=seed, tol=1))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Elastic\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", ElasticNet(random_state=seed))\n",
    "                      ]))\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_SVR\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"SVR\",  SVR(kernel='linear', C=1e2, degree=5))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_RF_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"RF\", RandomForestRegressor(random_state=seed))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_ET_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"ET\", ExtraTreesRegressor(random_state=seed))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_BR_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"BR\", BaggingRegressor(random_state=seed))\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Hub-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Hub-Reg\", HuberRegressor())\n",
    "                 ]))) \n",
    "pipelines.append(\n",
    "                (\"Scaled_BayRidge\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"BR\", BayesianRidge())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_XGB_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"XGBR\", XGBRegressor(seed=seed))\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_DT_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"DT_reg\", DecisionTreeRegressor())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_KNN_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"KNN_reg\", KNeighborsRegressor())\n",
    "                 ])))\n",
    "pipelines.append(\n",
    "                (\"Scaled_ADA-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"ADA-reg\", AdaBoostRegressor())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Linear\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Linear\", LinearRegression())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Gboost-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"GBoost-Reg\", GradientBoostingRegressor())\n",
    "                 ])))\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_RFR_PCA\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"PCA\", PCA(n_components=3)),\n",
    "                     (\"XGB\", RandomForestRegressor())\n",
    "                 ])))\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_XGBR_PCA\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"PCA\", PCA(n_components=3)),\n",
    "                     (\"XGB\", XGBRegressor())\n",
    "                 ])))\n",
    "\n",
    "#'neg_mean_absolute_error', 'neg_mean_squared_error','r2'\n",
    "scoring = 'r2'\n",
    "n_folds = 3\n",
    "\n",
    "results, names  = [], [] \n",
    "\n",
    "for name, model  in pipelines:\n",
    "    kfold = KFold(n_splits=n_folds, random_state=seed)\n",
    "    cv_results = cross_val_score(model, X_train, y_train, cv= kfold,\n",
    "                                 scoring=scoring, n_jobs=-1)    \n",
    "    names.append(name)\n",
    "    results.append(cv_results)    \n",
    "    msg = \"%s: %f (+/- %f)\" % (name, cv_results.mean(),  cv_results.std())\n",
    "    print(msg)\n",
    "    \n",
    "# boxplot algorithm comparison\n",
    "fig = plt.figure(figsize=(15,6))\n",
    "fig.suptitle('Algorithm Comparison', fontsize=22)\n",
    "ax = fig.add_subplot(111)\n",
    "sns.boxplot(x=names, y=results)\n",
    "ax.set_xticklabels(names)\n",
    "ax.set_xlabel(\"Algorithmn Name\", fontsize=20)\n",
    "ax.set_ylabel(\"R Squared Score of Models\", fontsize=18)\n",
    "ax.set_xticklabels(ax.get_xticklabels(),rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scaled_Ridge: 0.363838 (+/- 0.090397)\n",
      "Scaled_Lasso: 0.182497 (+/- 0.043711)\n",
      "Scaled_Elastic: 0.216708 (+/- 0.020035)\n",
      "Scaled_SVR: 0.309860 (+/- 0.084483)\n",
      "Scaled_ET_reg: 0.152563 (+/- 0.191443)\n",
      "Scaled_Hub-Reg: 0.368810 (+/- 0.070461)\n",
      "Scaled_BayRidge: 0.358826 (+/- 0.074662)\n",
      "Scaled_KNN_reg: 0.141764 (+/- 0.147781)\n",
      "Scaled_Linear: 0.360539 (+/- 0.096018)\n",
      "Scaled_RFR_PCA: 0.010315 (+/- 0.093873)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pipelines = []\n",
    "seed = 2\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Ridge\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Ridge\", Ridge(random_state=seed, tol=10 ))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Lasso\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", Lasso(random_state=seed, tol=1))\n",
    "                      ]))\n",
    "                )\n",
    "pipelines.append(\n",
    "                (\"Scaled_Elastic\", \n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()), \n",
    "                     (\"Lasso\", ElasticNet(random_state=seed))\n",
    "                      ]))\n",
    "                )\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_SVR\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"SVR\",  SVR(kernel='linear', C=1e2, degree=5))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_ET_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"ET\", ExtraTreesRegressor(random_state=seed))\n",
    "                 ])\n",
    "                )\n",
    "                )\n",
    "\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Hub-Reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Hub-Reg\", HuberRegressor())\n",
    "                 ]))) \n",
    "pipelines.append(\n",
    "                (\"Scaled_BayRidge\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"BR\", BayesianRidge())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_KNN_reg\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"KNN_reg\", KNeighborsRegressor())\n",
    "                 ])))\n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_Linear\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"Linear\", LinearRegression())\n",
    "                 ]))) \n",
    "\n",
    "pipelines.append(\n",
    "                (\"Scaled_RFR_PCA\",\n",
    "                 Pipeline([\n",
    "                     (\"Scaler\", StandardScaler()),\n",
    "                     (\"PCA\", PCA(n_components=3)),\n",
    "                     (\"XGB\", RandomForestRegressor())\n",
    "                 ])))\n",
    "\n",
    "#'neg_mean_absolute_error', 'neg_mean_squared_error','r2'\n",
    "scoring = 'r2'\n",
    "n_folds = 3\n",
    "\n",
    "results, names  = [], [] \n",
    "\n",
    "for name, model  in pipelines:\n",
    "    kfold = KFold(n_splits=n_folds, random_state=seed)\n",
    "    cv_results = cross_val_score(model, X_train, y_train, cv= kfold,\n",
    "                                 scoring=scoring, n_jobs=-1)    \n",
    "    names.append(name)\n",
    "    results.append(cv_results)    \n",
    "    msg = \"%s: %f (+/- %f)\" % (name, cv_results.mean(),  cv_results.std())\n",
    "    print(msg)\n",
    "    \n",
    "# boxplot algorithm comparison\n",
    "fig = plt.figure(figsize=(15,6))\n",
    "fig.suptitle('Algorithm Comparison', fontsize=22)\n",
    "ax = fig.add_subplot(111)\n",
    "sns.boxplot(x=names, y=results)\n",
    "ax.set_xticklabels(names)\n",
    "ax.set_xlabel(\"Algorithmn Name\", fontsize=20)\n",
    "ax.set_ylabel(\"R Squared Score of Models\", fontsize=18)\n",
    "ax.set_xticklabels(ax.get_xticklabels(),rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "-------Best score----------\n",
      "-9.574014165769116\n",
      "-------Best params----------\n",
      "{}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "Linear = pipelines[-2][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=Linear,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Ridge', Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=False, random_state=2, solver='auto', tol=10))])"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipelines[-10][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "-------Best score----------\n",
      "-9.58506891363229\n",
      "-------Best params----------\n",
      "{}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "Ridge = pipelines[-10][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=Ridge,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_learning_curve(train_sizes, train_scores, test_scores, title, alpha=0.1):\n",
    "    train_scores = -train_scores\n",
    "    test_scores = -test_scores\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "    plt.plot(train_sizes, train_mean, label='train score', color='blue', marker='o')\n",
    "    plt.fill_between(train_sizes,train_mean + train_std,\n",
    "                    train_mean - train_std, color='blue', alpha=alpha)\n",
    "    plt.plot(train_sizes, test_mean, label='test score', color='red',marker='o')\n",
    "    plt.fill_between(train_sizes,test_mean + test_std, test_mean - test_std , color='red', alpha=alpha)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Number of training points')\n",
    "    plt.ylabel(r'Mean Squared Error')\n",
    "    plt.grid(ls='--')\n",
    "    plt.legend(loc='best')\n",
    "    plt.show() \n",
    "    \n",
    "# Plot the learning curve\n",
    "plt.figure(figsize=(9,6))\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "                                            grid_rf.best_estimator_ , X= select_X_train, y = y_train, \n",
    "                                            cv= 3,  scoring='neg_mean_squared_error')\n",
    "\n",
    "plot_learning_curve(train_sizes, train_scores, test_scores, title='Learning curve for RF Regressor') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Root Mean Squared Error 2.85\n"
     ]
    }
   ],
   "source": [
    "best_model = clone(grid_rf.best_estimator_)\n",
    "best_model.fit(select_X_train, y_train)\n",
    "y_pred_train = best_model.predict(select_X_train)\n",
    "\n",
    "print( \"Training Root Mean Squared Error %.2f\" %( MSE(y_train, y_pred_train)**(1/2) ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error on Holdout Set 3.185516\n"
     ]
    }
   ],
   "source": [
    "y_pred_val = best_model.predict(select_X_val)\n",
    "print(\"Root Mean Squared Error on Holdout Set %f\" %(MSE(y_test, y_pred_val)**(1/2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x15= range(14)\n",
    "plt.plot(x15,x15)\n",
    "plt.scatter(y_pred_val, y_test)\n",
    "plt.suptitle(\"Actual vs. Predicted\")\n",
    "plt.xlabel(\"y predicted\")\n",
    "plt.ylabel(\"Actutal\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred_val, y_test - y_pred_val)\n",
    "plt.suptitle(\"Residual plot for the hold out set\")\n",
    "plt.xlabel(\"y predicted\")\n",
    "plt.ylabel(\"residual\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x20dde33fdd8>"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred_val, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('BR', BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, compute_score=False, copy_X=True,\n",
       "       fit_intercept=True, lambda_1=1e-06, lambda_2=1e-06, n_iter=300,\n",
       "       normalize=False, tol=0.001, verbose=False))])"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipelines[-4][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 625 candidates, totalling 1875 fits\n",
      "-------Best score----------\n",
      "-9.722303535019995\n",
      "-------Best params----------\n",
      "{'BR__alpha_1': 0.01, 'BR__alpha_2': 1e-06, 'BR__lambda_1': 1e-06, 'BR__lambda_2': 0.01, 'BR__n_iter': 200}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 1875 out of 1875 | elapsed:   11.9s finished\n"
     ]
    }
   ],
   "source": [
    "BayRidge = pipelines[-4][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "    'BR__n_iter' : [200],\n",
    "    'BR__alpha_1' : [1e-06,1e-04,1e-05,1e-03,1e-02],\n",
    "    'BR__alpha_2' : [1e-06,1e-04,1e-05,1e-03,1e-02],\n",
    "    'BR__lambda_1' : [1e-06,1e-04,1e-05,1e-03,1e-02],\n",
    "    'BR__lambda_2' : [1e-06,1e-04,1e-05,1e-03,1e-02]\n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=BayRidge,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_learning_curve(train_sizes, train_scores, test_scores, title, alpha=0.1):\n",
    "    train_scores = -train_scores\n",
    "    test_scores = -test_scores\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "    plt.plot(train_sizes, train_mean, label='train score', color='blue', marker='o')\n",
    "    plt.fill_between(train_sizes,train_mean + train_std,\n",
    "                    train_mean - train_std, color='blue', alpha=alpha)\n",
    "    plt.plot(train_sizes, test_mean, label='test score', color='red',marker='o')\n",
    "    plt.fill_between(train_sizes,test_mean + test_std, test_mean - test_std , color='red', alpha=alpha)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Number of training points')\n",
    "    plt.ylabel(r'Mean Squared Error')\n",
    "    plt.grid(ls='--')\n",
    "    plt.legend(loc='best')\n",
    "    plt.show() \n",
    "    \n",
    "# Plot the learning curve\n",
    "plt.figure(figsize=(9,6))\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "                                            grid_rf.best_estimator_ , X= select_X_train, y = y_train, \n",
    "                                            cv= 3,  scoring='neg_mean_squared_error')\n",
    "\n",
    "plot_learning_curve(train_sizes, train_scores, test_scores, title='Learning curve for RF Regressor') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Root Mean Squared Error 2.86\n"
     ]
    }
   ],
   "source": [
    "best_model = clone(grid_rf.best_estimator_)\n",
    "best_model.fit(select_X_train, y_train)\n",
    "y_pred_train = best_model.predict(select_X_train)\n",
    "\n",
    "print( \"Training Root Mean Squared Error %.2f\" %( MSE(y_train, y_pred_train)**(1/2) ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error on Holdout Set 3.186080\n"
     ]
    }
   ],
   "source": [
    "y_pred_val = best_model.predict(select_X_val)\n",
    "print(\"Root Mean Squared Error on Holdout Set %f\" %(MSE(y_test, y_pred_val)**(1/2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Ridge', Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "   normalize=False, random_state=2, solver='auto', tol=10))])"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred_val, y_test - y_pred_val)\n",
    "plt.suptitle(\"Residual plot for the hold out set\")\n",
    "plt.xlabel(\"y predicted\")\n",
    "plt.ylabel(\"residual\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred_val, y_test)\n",
    "plt.suptitle(\"Actual vs. Predicted\")\n",
    "plt.xlabel(\"y predicted\")\n",
    "plt.ylabel(\"y actual\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Linear', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipelines[-2][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "-------Best score----------\n",
      "-9.574014165769116\n",
      "-------Best params----------\n",
      "{}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "Linear = pipelines[-2][1]\n",
    "\n",
    "param_grid_rf =  [ { \n",
    "\n",
    "       }]\n",
    "\n",
    "grid_rf = GridSearchCV(estimator=Linear,\n",
    "                               param_grid= param_grid_rf,\n",
    "                               scoring= 'neg_mean_squared_error',\n",
    "                               cv = KFold(n_splits= 3, random_state= seed, shuffle=True),\n",
    "                               verbose = 1 )\n",
    "# Fit grid\n",
    "grid_rf.fit(select_X_train, y_train)\n",
    "\n",
    "# Best score and best parameters\n",
    "print('-------Best score----------')\n",
    "print(grid_rf.best_score_ )\n",
    "print('-------Best params----------')\n",
    "print(grid_rf.best_params_)          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_learning_curve(train_sizes, train_scores, test_scores, title, alpha=0.1):\n",
    "    train_scores = -train_scores\n",
    "    test_scores = -test_scores\n",
    "    train_mean = np.mean(train_scores, axis=1)\n",
    "    train_std = np.std(train_scores, axis=1)\n",
    "    test_mean = np.mean(test_scores, axis=1)\n",
    "    test_std = np.std(test_scores, axis=1)\n",
    "    plt.plot(train_sizes, train_mean, label='train score', color='blue', marker='o')\n",
    "    plt.fill_between(train_sizes,train_mean + train_std,\n",
    "                    train_mean - train_std, color='blue', alpha=alpha)\n",
    "    plt.plot(train_sizes, test_mean, label='test score', color='red',marker='o')\n",
    "    plt.fill_between(train_sizes,test_mean + test_std, test_mean - test_std , color='red', alpha=alpha)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('Number of training points')\n",
    "    plt.ylabel(r'Mean Squared Error')\n",
    "    plt.grid(ls='--')\n",
    "    plt.legend(loc='best')\n",
    "    plt.show() \n",
    "    \n",
    "# Plot the learning curve\n",
    "plt.figure(figsize=(9,6))\n",
    "train_sizes, train_scores, test_scores = learning_curve(\n",
    "                                            grid_rf.best_estimator_ , X= select_X_train, y = y_train, \n",
    "                                            cv= 3,  scoring='neg_mean_squared_error')\n",
    "\n",
    "plot_learning_curve(train_sizes, train_scores, test_scores, title='Learning curve for RF Regressor') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Root Mean Squared Error 2.85\n"
     ]
    }
   ],
   "source": [
    "best_model = clone(grid_rf.best_estimator_)\n",
    "best_model.fit(select_X_train, y_train)\n",
    "y_pred_train = best_model.predict(select_X_train)\n",
    "\n",
    "print( \"Training Root Mean Squared Error %.2f\" %( MSE(y_train, y_pred_train)**(1/2) ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error on Holdout Set 3.188552\n"
     ]
    }
   ],
   "source": [
    "y_pred_val = best_model.predict(select_X_val)\n",
    "print(\"Root Mean Squared Error on Holdout Set %f\" %(MSE(y_test, y_pred_val)**(1/2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "databricks = [1.24719232418189,0.951862931344295,0.671300585943595,0.981899434820076,-1.14895360823323]\n",
    "db = pd.DataFrame([databricks])\n",
    "db = db.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Linear', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])"
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "db_pred = best_model.predict(db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([16.97677582])"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "actualdb = db_pred\n",
    "actualdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TTM Rev Growth</th>\n",
       "      <th>NTM Rev Growth</th>\n",
       "      <th>GP Margin</th>\n",
       "      <th>S&amp;M Margin</th>\n",
       "      <th>EBITDA Margin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.730068</td>\n",
       "      <td>0.760249</td>\n",
       "      <td>0.805111</td>\n",
       "      <td>0.655488</td>\n",
       "      <td>-0.403603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.773790</td>\n",
       "      <td>0.308145</td>\n",
       "      <td>0.704052</td>\n",
       "      <td>0.533546</td>\n",
       "      <td>-0.359564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.945274</td>\n",
       "      <td>0.412487</td>\n",
       "      <td>0.720585</td>\n",
       "      <td>0.571938</td>\n",
       "      <td>-0.560198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.072875</td>\n",
       "      <td>0.324274</td>\n",
       "      <td>0.812349</td>\n",
       "      <td>0.198422</td>\n",
       "      <td>0.045933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.509411</td>\n",
       "      <td>0.567047</td>\n",
       "      <td>0.863696</td>\n",
       "      <td>0.619511</td>\n",
       "      <td>-0.192130</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   TTM Rev Growth  NTM Rev Growth  GP Margin  S&M Margin  EBITDA Margin\n",
       "0        1.730068        0.760249   0.805111    0.655488      -0.403603\n",
       "1        2.773790        0.308145   0.704052    0.533546      -0.359564\n",
       "2        1.945274        0.412487   0.720585    0.571938      -0.560198\n",
       "3        1.072875        0.324274   0.812349    0.198422       0.045933\n",
       "4        0.509411        0.567047   0.863696    0.619511      -0.192130"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "house.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('Scaler', StandardScaler(copy=True, with_mean=True, with_std=True)), ('Linear', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'values'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-308-a2c83893f3f1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0my_test_val\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'values'"
     ]
    }
   ],
   "source": [
    "y_test_val = y_test.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8.76722326,  3.9623645 , 14.99891246,  9.12422491,  5.4928569 ,\n",
       "       10.49736688, 14.55480168,  5.48553055, 11.85648084, 14.87319187,\n",
       "       10.73443143,  3.12612344,  7.49446165,  3.68408054, 12.34100291,\n",
       "        4.28191736,  9.16235139,  7.20065257,  1.89221863,  6.50295851,\n",
       "        6.8152068 ,  4.78229228,  6.79957807,  3.23693815,  2.26728987])"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.4493419908038543 3.1576648767861313\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'y_val' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-317-9d404ce317ae>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mmoe_1\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstd_err1\u001b[0m \u001b[1;33m*\u001b[0m \u001b[1;36m1.1\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0mt\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mstd_err1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mmoe_1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mSS_Total\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mr_squared\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mSS_Residual1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mSS_Total\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0madjusted_r_squared\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mr_squared\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m*\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m/\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'y_val' is not defined"
     ]
    }
   ],
   "source": [
    "yhat = best_model.predict(select_X_val).flatten()\n",
    "SS_Residual1 = sum((y_test-yhat)**2)\n",
    "std_err1 = math.sqrt(SS_Residual1/121)\n",
    "moe_1 = std_err1 * 1.1 * t\n",
    "print (std_err1,moe_1)\n",
    "SS_Total = sum((y_val-np.mean(y_val))**2)\n",
    "r_squared = 1 - (float(SS_Residual1))/SS_Total\n",
    "adjusted_r_squared = 1 - (1-r_squared)*(len(y_val)-1)/(len(y_val)-x.shape[1]-1)\n",
    "print (r_squared,adjusted_r_squared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = 1.98062600245909 #consistent with sample size at 95% confidence interval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "_change_revision": 0,
  "_is_fork": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
